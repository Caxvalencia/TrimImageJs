!function(t,e){if("object"==typeof exports&&"object"==typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var r=e();for(var a in r)("object"==typeof exports?exports:t)[a]=r[a]}}(window,function(){return function(t){var e={};function r(a){if(e[a])return e[a].exports;var n=e[a]={i:a,l:!1,exports:{}};return t[a].call(n.exports,n,n.exports,r),n.l=!0,n.exports}return r.m=t,r.c=e,r.d=function(t,e,a){r.o(t,e)||Object.defineProperty(t,e,{configurable:!1,enumerable:!0,get:a})},r.r=function(t){Object.defineProperty(t,"__esModule",{value:!0})},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=0)}([function(t,e,r){"use strict";var a;r.r(e),function(t){t.TOP="TOP",t.RIGHT="RIGHT",t.BOTTOM="BOTTOM",t.LEFT="LEFT"}(a||(a={}));var n=function(){function t(){}return t.create=function(t,e){var r=document.createElement("canvas");return r.width=t,r.height=e,r},t.context=function(e,r){return t.create(e,r).getContext("2d")},t}(),i=function(){function t(){}return t.getImageData=function(t){var e=t.width,r=t.height,a=n.context(e,r);return a.drawImage(t,0,0,e,r),a.getImageData(0,0,e,r)},t.create=function(t,e){return n.context(t,e).createImageData(t,e)},t}(),o=function(t,e,r,a){return new(r||(r=Promise))(function(n,i){function o(t){try{c(a.next(t))}catch(t){i(t)}}function u(t){try{c(a.throw(t))}catch(t){i(t)}}function c(t){t.done?n(t.value):new r(function(e){e(t.value)}).then(o,u)}c((a=a.apply(t,e||[])).next())})},u=function(t,e){var r,a,n,i,o={label:0,sent:function(){if(1&n[0])throw n[1];return n[1]},trys:[],ops:[]};return i={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function u(i){return function(u){return function(i){if(r)throw new TypeError("Generator is already executing.");for(;o;)try{if(r=1,a&&(n=a[2&i[0]?"return":i[0]?"throw":"next"])&&!(n=n.call(a,i[1])).done)return n;switch(a=0,n&&(i=[0,n.value]),i[0]){case 0:case 1:n=i;break;case 4:return o.label++,{value:i[1],done:!1};case 5:o.label++,a=i[1],i=[0];continue;case 7:i=o.ops.pop(),o.trys.pop();continue;default:if(!(n=(n=o.trys).length>0&&n[n.length-1])&&(6===i[0]||2===i[0])){o=0;continue}if(3===i[0]&&(!n||i[1]>n[0]&&i[1]<n[3])){o.label=i[1];break}if(6===i[0]&&o.label<n[1]){o.label=n[1],n=i;break}if(n&&o.label<n[2]){o.label=n[2],o.ops.push(i);break}n[2]&&o.ops.pop(),o.trys.pop();continue}i=e.call(t,o)}catch(t){i=[6,t],a=0}finally{r=n=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,u])}}},c=function(){function t(t,e){this.configureImage(t,e)}return t.prototype.configureImage=function(t,e){return o(this,void 0,void 0,function(){var r,a;return u(this,function(n){switch(n.label){case 0:return r=this,"string"!=typeof t?[3,2]:[4,(i=t,new Promise(function(t,e){var r=new Image;r.onload=function(){return t(r)},r.onerror=e,r.src=i}))];case 1:return a=n.sent(),[3,3];case 2:a=t,n.label=3;case 3:return r.image=a,void 0!==e&&e.call(this,this.image),[2]}var i})})},t.prototype.getImage=function(t,e){this.validateImageData(t);var r=t.width,a=t.height,i=n.create(r,a);i.getContext("2d").putImageData(t,0,0);var o=new Image;return o.width=r,o.height=a,e&&(o.onload=e),o.src=i.toDataURL("image/png"),o},t.trim=function(e,r){return new t(e,r).trim()},t.trimTop=function(e,r){return new t(e,r).trimTop()},t.trimBottom=function(e,r){return new t(e,r).trimBottom()},t.trimLeft=function(e,r){return new t(e,r).trimLeft()},t.trimRight=function(e,r){return new t(e,r).trimRight()},t.prototype.trim=function(){return this.image=this.getImage(this._trim(i.getImageData(this.image))),this},t.prototype.trimTop=function(){return this.image=this.getImage(this._trimTop(i.getImageData(this.image))),this},t.prototype.trimBottom=function(){return this.image=this.getImage(this._trimBottom(i.getImageData(this.image))),this},t.prototype.trimLeft=function(){return this.image=this.getImage(this._trimLeft(i.getImageData(this.image))),this},t.prototype.trimRight=function(){return this.image=this.getImage(this._trimRight(i.getImageData(this.image))),this},t.prototype._trim=function(t){this.validateImageData(t);var e=this._trimTop(t);return e=this._trimBottom(e),e=this._trimLeft(e),e=this._trimRight(e)},t.prototype._trimTop=function(t){var e=0,r=4*t.width,n=t.height;return this.readImageData(a.TOP,t,function(t,r,a){if(0!=a.alpha())return e=t,"break"}),this.cutImageData(t,e,0,n,r)},t.prototype._trimBottom=function(t){var e=t.height,r=4*t.width;return this.readImageData(a.BOTTOM,t,function(t,r,a){if(0!=a.alpha())return e=t,"break"}),this.cutImageData(t,0,0,e,r)},t.prototype._trimLeft=function(t){var e=0,r=4*t.width,n=t.height;return this.readImageData(a.LEFT,t,function(t,r,a){if(0!=a.alpha())return e=r,"break"}),this.cutImageData(t,0,e,n,r)},t.prototype._trimRight=function(t){var e=4*t.width,r=t.height;return this.readImageData(a.RIGHT,t,function(t,r,a){if(0!=a.alpha())return e=r,"break"}),this.cutImageData(t,0,0,r,e)},t.prototype.cutImageData=function(t,e,r,a,n){this.validateImageData(t);var o=t.data,u=4*t.width;a=0==a?1:a,n=0==n?1:n;for(var c=a==e?1:a-e,f=n/4-r/4,h=i.create(f,c),s=u-n,m=0,g=e;g<a;g++)for(var p=g*n+g*s,l=r;l<n;l+=4,m+=4)h.data[m]=o[p+l],h.data[m+1]=o[p+l+1],h.data[m+2]=o[p+l+2],h.data[m+3]=o[p+l+3];return h},t.prototype.readImageData=function(t,e,r){this.validateImageData(e);var n,i,o=e.data,u=-1,c=4*e.width,f=e.height,h=!1;if(t===a.TOP){var s=f,m=0,g=c,p={row:1,col:4};for(n=l=0;n<s;n+=p.row){for(u=n*c,i=m;i<g&&"break"!=(h=r.apply(this,[n,i,{red:d(u+i),green:d(u+i+1),blue:d(u+i+2),alpha:d(u+i+3)}]));i+=p.col);if("break"==h)break}}else if(t===a.BOTTOM){s=0,m=c,g=0;for(n=l=f;n>=s;n--){for(u=n*m,i=m;i>g&&"break"!=(h=r.apply(this,[n,i,{red:d(u-i),green:d(u-i-3),blue:d(u-i-2),alpha:d(u-i-1)}]));i-=4);if("break"==h)break}}else if(t===a.LEFT){var l=0;s=f,g=c;for(i=m=0;i<g;i+=4){for(n=l;n<s&&(u=n*g,"break"!=(h=r.apply(this,[n,i,{red:d(u+i),green:d(u+i+1),blue:d(u+i+2),alpha:d(u+i+3)}])));n++);if("break"==h)break}}else if(t===a.RIGHT){l=f-1,s=1,g=0;for(i=m=c;i>g;i-=4){for(n=l;n>s&&(u=n*m-4+i,"break"!=(h=r.apply(this,[n,i,{red:d(u-3),green:d(u-2),blue:d(u-1),alpha:d(u)}])));n--);if("break"==h)break}}function d(t){return function(e){if(!e)return o[t];o[t]=e}}return e},t.prototype.validateImageData=function(t){if("imagedata"!==(e=t,{}.toString.call(e).match(/\s([a-z|A-Z]+)/)[1].toLowerCase()))throw"ImageData Exception: No es compatible el tipo de dato";var e},t}();r.d(e,"TrimImage",function(){return c})}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,