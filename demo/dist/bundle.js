!function(t,e){if("object"==typeof exports&&"object"==typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var a=e();for(var r in a)("object"==typeof exports?exports:t)[r]=a[r]}}(window,function(){return function(t){var e={};function a(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,a),i.l=!0,i.exports}return a.m=t,a.c=e,a.d=function(t,e,r){a.o(t,e)||Object.defineProperty(t,e,{configurable:!1,enumerable:!0,get:r})},a.r=function(t){Object.defineProperty(t,"__esModule",{value:!0})},a.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return a.d(e,"a",e),e},a.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},a.p="",a(a.s=0)}([function(t,e,a){"use strict";var r;a.r(e),function(t){t.TOP="TOP",t.RIGHT="RIGHT",t.BOTTOM="BOTTOM",t.LEFT="LEFT"}(r||(r={}));var i=function(t,e,a,r){return new(a||(a=Promise))(function(i,n){function o(t){try{h(r.next(t))}catch(t){n(t)}}function u(t){try{h(r.throw(t))}catch(t){n(t)}}function h(t){t.done?i(t.value):new a(function(e){e(t.value)}).then(o,u)}h((r=r.apply(t,e||[])).next())})},n=function(t,e){var a,r,i,n,o={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return n={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(n[Symbol.iterator]=function(){return this}),n;function u(n){return function(u){return function(n){if(a)throw new TypeError("Generator is already executing.");for(;o;)try{if(a=1,r&&(i=r[2&n[0]?"return":n[0]?"throw":"next"])&&!(i=i.call(r,n[1])).done)return i;switch(r=0,i&&(n=[0,i.value]),n[0]){case 0:case 1:i=n;break;case 4:return o.label++,{value:n[1],done:!1};case 5:o.label++,r=n[1],n=[0];continue;case 7:n=o.ops.pop(),o.trys.pop();continue;default:if(!(i=(i=o.trys).length>0&&i[i.length-1])&&(6===n[0]||2===n[0])){o=0;continue}if(3===n[0]&&(!i||n[1]>i[0]&&n[1]<i[3])){o.label=n[1];break}if(6===n[0]&&o.label<i[1]){o.label=i[1],i=n;break}if(i&&o.label<i[2]){o.label=i[2],o.ops.push(n);break}i[2]&&o.ops.pop(),o.trys.pop();continue}n=e.call(t,o)}catch(t){n=[6,t],r=0}finally{a=i=0}if(5&n[0])throw n[1];return{value:n[0]?n[1]:void 0,done:!0}}([n,u])}}},o=function(){function t(t,e){this.configureImage(t,e)}return t.prototype.configureImage=function(t,e){return i(this,void 0,void 0,function(){var a,r;return n(this,function(i){switch(i.label){case 0:return a=this,"string"!=typeof t?[3,2]:[4,(n=t,new Promise(function(t,e){var a=new Image;a.onload=function(){return t(a)},a.onerror=e,a.src=n}))];case 1:return r=i.sent(),[3,3];case 2:r=t,i.label=3;case 3:return a.image=r,void 0!==e&&e.call(this,this.image),[2]}var n})})},t.prototype.getImageData=function(t){var e=t.width,a=t.height,r=u(e,a).context;return r.drawImage(t,0,0,e,a),r.getImageData(0,0,e,a)},t.prototype.getImage=function(t,e){this.validateImageData(t);var a=t.width,r=t.height,i=u(a,r),n=i.context,o=i.canvas;n.putImageData(t,0,0);var h=new Image;return h.width=a,h.height=r,e&&(h.onload=e),h.src=o.toDataURL("image/png"),h},t.trim=function(e,a){return new t(e,a).trim()},t.prototype.trim=function(t){return void 0!==t?this.getImage(this._trim(this.getImageData(t))):(this.image=this.getImage(this._trim(this.getImageData(this.image))),this)},t.prototype.trimTop=function(t){return void 0!==t?this.getImage(this._trimTop(this.getImageData(t))):(this.image=this.getImage(this._trimTop(this.getImageData(this.image))),this)},t.prototype.trimBottom=function(t){return void 0!==t?this.getImage(this._trimBottom(this.getImageData(t))):(this.image=this.getImage(this._trimBottom(this.getImageData(this.image))),this)},t.prototype.trimLeft=function(t){return void 0!==t?this.getImage(this._trimLeft(this.getImageData(t))):(this.image=this.getImage(this._trimLeft(this.getImageData(this.image))),this)},t.prototype.trimRight=function(t){return void 0!==t?this.getImage(this._trimRight(this.getImageData(t))):(this.image=this.getImage(this._trimRight(this.getImageData(this.image))),this)},t.prototype._trim=function(t){this.validateImageData(t);var e=this._trimTop(t);return e=this._trimBottom(e),e=this._trimLeft(e),e=this._trimRight(e)},t.prototype._trimTop=function(t){var e=0,a=4*t.width,i=t.height;return this.readImageData(r.TOP,t,function(t,a){if(0!=this.alpha())return e=t,"break"}),this.cutImageData(t,e,0,i,a)},t.prototype._trimBottom=function(t){var e=t.height,a=4*t.width;return this.readImageData(r.BOTTOM,t,function(t,a){if(0!=this.alpha())return e=t,"break"}),this.cutImageData(t,0,0,e,a)},t.prototype._trimLeft=function(t){var e=0,a=4*t.width,i=t.height;return this.readImageData(r.LEFT,t,function(t,a){if(0!=this.alpha())return e=a,"break"}),this.cutImageData(t,0,e,i,a)},t.prototype._trimRight=function(t){var e=4*t.width,a=t.height;return this.readImageData(r.RIGHT,t,function(t,a){if(0!=this.alpha())return e=a,"break"}),this.cutImageData(t,0,0,a,e)},t.prototype.cutImageData=function(t,e,a,r,i){this.validateImageData(t);var n=t.data,o=4*t.width;r=0==r?1:r,i=0==i?1:i;var h=r==e?1:r-e,s=i/4-a/4,c=[];u(s,h,function(t){c=t.createImageData(s,h)});for(var f=o-i,g=0,m=e;m<r;m++)for(var p=m*i+m*f,l=a;l<i;l+=4,g+=4)c.data[g]=n[p+l],c.data[g+1]=n[p+l+1],c.data[g+2]=n[p+l+2],c.data[g+3]=n[p+l+3];return c},t.prototype.readImageData=function(t,e,a){this.validateImageData(e);var i,n,o=e.data,u=-1,h=4*e.width,s=e.height,c=!1;if(t===r.TOP){var f=s,g=0,m=h,p={row:1,col:4};for(i=l=0;i<f;i+=p.row){for(u=i*h,n=g;n<m&&"break"!=(c=a.apply({red:d(u+n),green:d(u+n+1),blue:d(u+n+2),alpha:d(u+n+3)},[i,n]));n+=p.col);if("break"==c)break}}else if(t===r.BOTTOM){f=0,g=h,m=0;for(i=l=s;i>=f;i--){for(u=i*g,n=g;n>m&&"break"!=(c=a.apply({red:d(u-n),green:d(u-n-3),blue:d(u-n-2),alpha:d(u-n-1)},[i,n]));n-=4);if("break"==c)break}}else if(t===r.LEFT){var l=0;f=s,m=h;for(n=g=0;n<m;n+=4){for(i=l;i<f&&(u=i*m,"break"!=(c=a.apply({red:d(u+n),green:d(u+n+1),blue:d(u+n+2),alpha:d(u+n+3)},[i,n])));i++);if("break"==c)break}}else if(t===r.RIGHT){l=s-1,f=1,m=0;for(n=g=h;n>m;n-=4){for(i=l;i>f&&(u=i*g-4+n,"break"!=(c=a.apply({red:d(u-3),green:d(u-2),blue:d(u-1),alpha:d(u)},[i,n])));i--);if("break"==c)break}}function d(t){return function(e){if(!e)return o[t];o[t]=e}}return e},t.prototype.validateImageData=function(t){if("imagedata"!==(e=t,{}.toString.call(e).match(/\s([a-z|A-Z]+)/)[1].toLowerCase()))throw"ImageData Exception: No es compatible el tipo de dato";var e},t}();function u(t,e,a){var r=document.createElement("canvas");r.width=t,r.height=e;var i=r.getContext("2d"),n={canvas:r,context:i};return a&&a.apply(n,[i,r]),n}a.d(e,"TrimImage",function(){return o})}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,