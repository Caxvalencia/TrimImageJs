!function(t,e){if("object"==typeof exports&&"object"==typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var r=e();for(var n in r)("object"==typeof exports?exports:t)[n]=r[n]}}(window,function(){return function(t){var e={};function r(n){if(e[n])return e[n].exports;var o=e[n]={i:n,l:!1,exports:{}};return t[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}return r.m=t,r.c=e,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{configurable:!1,enumerable:!0,get:n})},r.r=function(t){Object.defineProperty(t,"__esModule",{value:!0})},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=0)}([function(t,e,r){"use strict";var n;r.r(e),function(t){t.TOP="TOP",t.RIGHT="RIGHT",t.BOTTOM="BOTTOM",t.LEFT="LEFT"}(n||(n={}));var o,i=function(){function t(){}return t.create=function(t,e){var r=document.createElement("canvas");return r.width=t,r.height=e,r},t.context=function(e,r){return t.create(e,r).getContext("2d")},t}(),a=function(){function t(){}return t.getPixel=function(t){return function(e){return t[e]}},t}(),u=(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])},function(t,e){function r(){this.constructor=t}o(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}),c=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return u(e,t),e.apply=function(e,r,n){for(var o=t.getPixel.call(this,e),i=1,a=4,u=0;u<r;u+=i)for(var c=u*n,f=0;f<n;f+=a){if(0!==o(c+f+3))return{row:u,col:f}}},e}(a),f=function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])};return function(e,r){function n(){this.constructor=e}t(e,r),e.prototype=null===r?Object.create(r):(n.prototype=r.prototype,new n)}}(),p=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return f(e,t),e.apply=function(e,r,n){for(var o=-1,i=t.getPixel.call(this,e),a=n,u=r;u>=0;u--){o=u*a;for(var c=a;c>0;c-=4){if(0!==i(o-c-1))return{row:u,col:c}}}},e}(a),s=function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])};return function(e,r){function n(){this.constructor=e}t(e,r),e.prototype=null===r?Object.create(r):(n.prototype=r.prototype,new n)}}(),l=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return s(e,t),e.apply=function(e,r,n){for(var o=t.getPixel.call(this,e),i=r,a=n,u=0;u<a;u+=4)for(var c=0;c<i;c++){if(0!==o(c*a+u+3))return{row:c,col:u}}},e}(a),h=function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])};return function(e,r){function n(){this.constructor=e}t(e,r),e.prototype=null===r?Object.create(r):(n.prototype=r.prototype,new n)}}(),m=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return h(e,t),e.apply=function(e,r,n){for(var o=t.getPixel.call(this,e),i=r-1,a=n,u=a;u>0;u-=4)for(var c=i;c>1;c--){if(0!==o(c*a-4+u))return{row:c,col:u}}},e}(a),g=function(){function t(){}return t.getImage=function(e){t.validate(e);var r=e.width,n=e.height,o=i.create(r,n);o.getContext("2d").putImageData(e,0,0);var a=new Image;return a.width=r,a.height=n,a.src=o.toDataURL("image/png"),a},t.getImageData=function(t){var e=t.width,r=t.height,n=i.context(e,r);return n.drawImage(t,0,0,e,r),n.getImageData(0,0,e,r)},t.create=function(t,e){return i.context(t,e).createImageData(t,e)},t.validate=function(t){if("imagedata"!==(e=t,{}.toString.call(e).match(/\s([a-z|A-Z]+)/)[1].toLowerCase()))throw"ImageData Exception: No es compatible el tipo de dato";var e},t.cutImageData=function(e,r,n,o,i){t.validate(e);var a=e.data,u=4*e.width;o=0==o?1:o,i=0==i?1:i;for(var c=o==r?1:o-r,f=i/4-n/4,p=t.create(f,c),s=u-i,l=0,h=r;h<o;h++)for(var m=h*i+h*s,g=n;g<i;g+=4,l+=4)p.data[l]=a[m+g],p.data[l+1]=a[m+g+1],p.data[l+2]=a[m+g+2],p.data[l+3]=a[m+g+3];return p},t.readImageData=function(e,r){t.validate(r);var o,i=r.data,a=r.height,u=4*r.width;return((o={})[n.TOP]=c,o[n.BOTTOM]=p,o[n.LEFT]=l,o[n.RIGHT]=m,o)[e].apply(i,a,u)},t}();var y=function(){function t(){}return t.create=function(t){return new Promise(function(e,r){var n=new Image;n.onload=function(){return e(n)},n.onerror=r,n.src=t})},t}(),d=function(t,e,r,n){return new(r||(r=Promise))(function(o,i){function a(t){try{c(n.next(t))}catch(t){i(t)}}function u(t){try{c(n.throw(t))}catch(t){i(t)}}function c(t){t.done?o(t.value):new r(function(e){e(t.value)}).then(a,u)}c((n=n.apply(t,e||[])).next())})},v=function(t,e){var r,n,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function u(i){return function(u){return function(i){if(r)throw new TypeError("Generator is already executing.");for(;a;)try{if(r=1,n&&(o=n[2&i[0]?"return":i[0]?"throw":"next"])&&!(o=o.call(n,i[1])).done)return o;switch(n=0,o&&(i=[0,o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,n=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=(o=a.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=e.call(t,a)}catch(t){i=[6,t],n=0}finally{r=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,u])}}},_=function(){function t(t,e){this.configureImage(t,e)}return t.trim=function(e,r){return new t(e,r).trim()},t.trimTop=function(e,r){return new t(e,r).trimTop()},t.trimBottom=function(e,r){return new t(e,r).trimBottom()},t.trimLeft=function(e,r){return new t(e,r).trimLeft()},t.trimRight=function(e,r){return new t(e,r).trimRight()},t.prototype.configureImage=function(t,e){return d(this,void 0,void 0,function(){var r,n;return v(this,function(o){switch(o.label){case 0:return r=this,"string"!=typeof t?[3,2]:[4,y.create(t)];case 1:return n=o.sent(),[3,3];case 2:n=t,o.label=3;case 3:return r.image=n,void 0!==e&&e.call(this,this.image),[2]}})})},t.prototype.trim=function(){return this.image=g.getImage(this._trim(g.getImageData(this.image))),this},t.prototype.trimTop=function(){return this.image=g.getImage(this._trimTop(g.getImageData(this.image))),this},t.prototype.trimBottom=function(){return this.image=g.getImage(this._trimBottom(g.getImageData(this.image))),this},t.prototype.trimLeft=function(){return this.image=g.getImage(this._trimLeft(g.getImageData(this.image))),this},t.prototype.trimRight=function(){return this.image=g.getImage(this._trimRight(g.getImageData(this.image))),this},t.prototype._trim=function(t){g.validate(t);var e=this._trimTop(t);return e=this._trimBottom(e),e=this._trimLeft(e),e=this._trimRight(e)},t.prototype._trimTop=function(t){var e=g.readImageData(n.TOP,t).row,r=4*t.width,o=t.height;return g.cutImageData(t,e,0,o,r)},t.prototype._trimBottom=function(t){var e=t.height,r=4*t.width;return e=g.readImageData(n.BOTTOM,t).row||e,g.cutImageData(t,0,0,e,r)},t.prototype._trimLeft=function(t){var e=g.readImageData(n.LEFT,t).col,r=4*t.width,o=t.height;return g.cutImageData(t,0,e,o,r)},t.prototype._trimRight=function(t){var e=4*t.width,r=t.height;return e=g.readImageData(n.RIGHT,t).col||e,g.cutImageData(t,0,0,r,e)},t}();r.d(e,"TrimImage",function(){return _})}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,