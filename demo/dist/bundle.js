!function(t,e){if("object"==typeof exports&&"object"==typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var r=e();for(var n in r)("object"==typeof exports?exports:t)[n]=r[n]}}(window,function(){return function(t){var e={};function r(n){if(e[n])return e[n].exports;var o=e[n]={i:n,l:!1,exports:{}};return t[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}return r.m=t,r.c=e,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{configurable:!1,enumerable:!0,get:n})},r.r=function(t){Object.defineProperty(t,"__esModule",{value:!0})},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=0)}([function(t,e,r){"use strict";var n;r.r(e),function(t){t.TOP="TOP",t.RIGHT="RIGHT",t.BOTTOM="BOTTOM",t.LEFT="LEFT"}(n||(n={}));var o=function(){function t(){}return t.create=function(t,e){var r=document.createElement("canvas");return r.width=t,r.height=e,r},t.context=function(e,r){return t.create(e,r).getContext("2d")},t}(),i=function(){function t(){}return t.getImage=function(e){t.validate(e);var r=e.width,n=e.height,i=o.create(r,n);i.getContext("2d").putImageData(e,0,0);var a=new Image;return a.width=r,a.height=n,a.src=i.toDataURL("image/png"),a},t.getImageData=function(t){var e=t.width,r=t.height,n=o.context(e,r);return n.drawImage(t,0,0,e,r),n.getImageData(0,0,e,r)},t.create=function(t,e){return o.context(t,e).createImageData(t,e)},t.validate=function(t){if("imagedata"!==(e=t,{}.toString.call(e).match(/\s([a-z|A-Z]+)/)[1].toLowerCase()))throw"ImageData Exception: No es compatible el tipo de dato";var e},t}();var a,u=function(){function t(){}return t.create=function(t){return new Promise(function(e,r){var n=new Image;n.onload=function(){return e(n)},n.onerror=r,n.src=t})},t}(),c=function(){function t(){}return t.getPixel=function(t){return function(e){return t[e]}},t}(),f=(a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])},function(t,e){function r(){this.constructor=t}a(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}),p=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return f(e,t),e.apply=function(e,r,n,o){for(var i=-1,a=!1,u=t.getPixel.call(this,e),c=n,f=r;f>=0;f--){i=f*c;for(var p=c;p>0&&"break"!=(a=o.apply(this,[f,p,{red:u(i-p),green:u(i-p-3),blue:u(i-p-2),alpha:u(i-p-1)}]));p-=4);if("break"==a)break}},e}(c),l=function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])};return function(e,r){function n(){this.constructor=e}t(e,r),e.prototype=null===r?Object.create(r):(n.prototype=r.prototype,new n)}}(),s=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return l(e,t),e.apply=function(e,r,n,o){for(var i=-1,a=!1,u=t.getPixel.call(this,e),c=r,f=n,p=0;p<f;p+=4){for(var l=0;l<c&&(i=l*f,"break"!=(a=o.apply(this,[l,p,{red:u(i+p),green:u(i+p+1),blue:u(i+p+2),alpha:u(i+p+3)}])));l++);if("break"==a)break}},e}(c),h=function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])};return function(e,r){function n(){this.constructor=e}t(e,r),e.prototype=null===r?Object.create(r):(n.prototype=r.prototype,new n)}}(),g=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return h(e,t),e.apply=function(e,r,n,o){for(var i=-1,a=!1,u=t.getPixel.call(this,e),c=r-1,f=n,p=f;p>0;p-=4){for(var l=c;l>1&&(i=l*f-4+p,"break"!=(a=o.apply(this,[l,p,{red:u(i-3),green:u(i-2),blue:u(i-1),alpha:u(i)}])));l--);if("break"==a)break}},e}(c),m=function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])};return function(e,r){function n(){this.constructor=e}t(e,r),e.prototype=null===r?Object.create(r):(n.prototype=r.prototype,new n)}}(),y=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return m(e,t),e.apply=function(e,r,n,o){for(var i=-1,a=!1,u=1,c=4,f=t.getPixel.call(this,e),p=0;p<r;p+=u){i=p*n;for(var l=0;l<n&&"break"!=(a=o.apply(this,[p,l,{red:f(i+l),green:f(i+l+1),blue:f(i+l+2),alpha:f(i+l+3)}]));l+=c);if("break"==a)break}},e}(c),d=function(t,e,r,n){return new(r||(r=Promise))(function(o,i){function a(t){try{c(n.next(t))}catch(t){i(t)}}function u(t){try{c(n.throw(t))}catch(t){i(t)}}function c(t){t.done?o(t.value):new r(function(e){e(t.value)}).then(a,u)}c((n=n.apply(t,e||[])).next())})},v=function(t,e){var r,n,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function u(i){return function(u){return function(i){if(r)throw new TypeError("Generator is already executing.");for(;a;)try{if(r=1,n&&(o=n[2&i[0]?"return":i[0]?"throw":"next"])&&!(o=o.call(n,i[1])).done)return o;switch(n=0,o&&(i=[0,o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,n=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=(o=a.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=e.call(t,a)}catch(t){i=[6,t],n=0}finally{r=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,u])}}},b=function(){function t(t,e){this.configureImage(t,e)}return t.prototype.configureImage=function(t,e){return d(this,void 0,void 0,function(){var r,n;return v(this,function(o){switch(o.label){case 0:return r=this,"string"!=typeof t?[3,2]:[4,u.create(t)];case 1:return n=o.sent(),[3,3];case 2:n=t,o.label=3;case 3:return r.image=n,void 0!==e&&e.call(this,this.image),[2]}})})},t.trim=function(e,r){return new t(e,r).trim()},t.trimTop=function(e,r){return new t(e,r).trimTop()},t.trimBottom=function(e,r){return new t(e,r).trimBottom()},t.trimLeft=function(e,r){return new t(e,r).trimLeft()},t.trimRight=function(e,r){return new t(e,r).trimRight()},t.prototype.trim=function(){return this.image=i.getImage(this._trim(i.getImageData(this.image))),this},t.prototype.trimTop=function(){return this.image=i.getImage(this._trimTop(i.getImageData(this.image))),this},t.prototype.trimBottom=function(){return this.image=i.getImage(this._trimBottom(i.getImageData(this.image))),this},t.prototype.trimLeft=function(){return this.image=i.getImage(this._trimLeft(i.getImageData(this.image))),this},t.prototype.trimRight=function(){return this.image=i.getImage(this._trimRight(i.getImageData(this.image))),this},t.prototype._trim=function(t){i.validate(t);var e=this._trimTop(t);return e=this._trimBottom(e),e=this._trimLeft(e),e=this._trimRight(e)},t.prototype._trimTop=function(t){var e=0,r=4*t.width,o=t.height;return this.readImageData(n.TOP,t,function(t,r,n){if(0!=n.alpha)return e=t,"break"}),this.cutImageData(t,e,0,o,r)},t.prototype._trimBottom=function(t){var e=t.height,r=4*t.width;return this.readImageData(n.BOTTOM,t,function(t,r,n){if(0!=n.alpha)return e=t,"break"}),this.cutImageData(t,0,0,e,r)},t.prototype._trimLeft=function(t){var e=0,r=4*t.width,o=t.height;return this.readImageData(n.LEFT,t,function(t,r,n){if(0!=n.alpha)return e=r,"break"}),this.cutImageData(t,0,e,o,r)},t.prototype._trimRight=function(t){var e=4*t.width,r=t.height;return this.readImageData(n.RIGHT,t,function(t,r,n){if(0!=n.alpha)return e=r,"break"}),this.cutImageData(t,0,0,r,e)},t.prototype.cutImageData=function(t,e,r,n,o){i.validate(t);var a=t.data,u=4*t.width;n=0==n?1:n,o=0==o?1:o;for(var c=n==e?1:n-e,f=o/4-r/4,p=i.create(f,c),l=u-o,s=0,h=e;h<n;h++)for(var g=h*o+h*l,m=r;m<o;m+=4,s+=4)p.data[s]=a[g+m],p.data[s+1]=a[g+m+1],p.data[s+2]=a[g+m+2],p.data[s+3]=a[g+m+3];return p},t.prototype.readImageData=function(t,e,r){i.validate(e);var o,a=e.data,u=4*e.width,c=e.height;return((o={})[n.TOP]=y.apply,o[n.BOTTOM]=p.apply,o[n.LEFT]=s.apply,o[n.RIGHT]=g.apply,o)[t](a,c,u,r),e},t}();r.d(e,"TrimImage",function(){return b})}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,