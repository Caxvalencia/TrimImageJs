!function(t,e){if("object"==typeof exports&&"object"==typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var r=e();for(var n in r)("object"==typeof exports?exports:t)[n]=r[n]}}(window,function(){return function(t){var e={};function r(n){if(e[n])return e[n].exports;var a=e[n]={i:n,l:!1,exports:{}};return t[n].call(a.exports,a,a.exports,r),a.l=!0,a.exports}return r.m=t,r.c=e,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{configurable:!1,enumerable:!0,get:n})},r.r=function(t){Object.defineProperty(t,"__esModule",{value:!0})},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=0)}([function(t,e,r){"use strict";var n;r.r(e),function(t){t.TOP="TOP",t.RIGHT="RIGHT",t.BOTTOM="BOTTOM",t.LEFT="LEFT"}(n||(n={}));var a=function(){function t(){}return t.create=function(t,e){var r=document.createElement("canvas");return r.width=t,r.height=e,r},t.context=function(e,r){return t.create(e,r).getContext("2d")},t}(),i=function(){function t(){}return t.getImage=function(e){t.validate(e);var r=e.width,n=e.height,i=a.create(r,n);i.getContext("2d").putImageData(e,0,0);var o=new Image;return o.width=r,o.height=n,o.src=i.toDataURL("image/png"),o},t.getImageData=function(t){var e=t.width,r=t.height,n=a.context(e,r);return n.drawImage(t,0,0,e,r),n.getImageData(0,0,e,r)},t.create=function(t,e){return a.context(t,e).createImageData(t,e)},t.validate=function(t){if("imagedata"!==(e=t,{}.toString.call(e).match(/\s([a-z|A-Z]+)/)[1].toLowerCase()))throw"ImageData Exception: No es compatible el tipo de dato";var e},t}();var o=function(){function t(){}return t.create=function(t){return new Promise(function(e,r){var n=new Image;n.onload=function(){return e(n)},n.onerror=r,n.src=t})},t}(),u=function(t,e,r,n){return new(r||(r=Promise))(function(a,i){function o(t){try{c(n.next(t))}catch(t){i(t)}}function u(t){try{c(n.throw(t))}catch(t){i(t)}}function c(t){t.done?a(t.value):new r(function(e){e(t.value)}).then(o,u)}c((n=n.apply(t,e||[])).next())})},c=function(t,e){var r,n,a,i,o={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return i={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function u(i){return function(u){return function(i){if(r)throw new TypeError("Generator is already executing.");for(;o;)try{if(r=1,n&&(a=n[2&i[0]?"return":i[0]?"throw":"next"])&&!(a=a.call(n,i[1])).done)return a;switch(n=0,a&&(i=[0,a.value]),i[0]){case 0:case 1:a=i;break;case 4:return o.label++,{value:i[1],done:!1};case 5:o.label++,n=i[1],i=[0];continue;case 7:i=o.ops.pop(),o.trys.pop();continue;default:if(!(a=(a=o.trys).length>0&&a[a.length-1])&&(6===i[0]||2===i[0])){o=0;continue}if(3===i[0]&&(!a||i[1]>a[0]&&i[1]<a[3])){o.label=i[1];break}if(6===i[0]&&o.label<a[1]){o.label=a[1],a=i;break}if(a&&o.label<a[2]){o.label=a[2],o.ops.push(i);break}a[2]&&o.ops.pop(),o.trys.pop();continue}i=e.call(t,o)}catch(t){i=[6,t],n=0}finally{r=a=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,u])}}},f=function(){function t(t,e){this.configureImage(t,e)}return t.prototype.configureImage=function(t,e){return u(this,void 0,void 0,function(){var r,n;return c(this,function(a){switch(a.label){case 0:return r=this,"string"!=typeof t?[3,2]:[4,o.create(t)];case 1:return n=a.sent(),[3,3];case 2:n=t,a.label=3;case 3:return r.image=n,void 0!==e&&e.call(this,this.image),[2]}})})},t.trim=function(e,r){return new t(e,r).trim()},t.trimTop=function(e,r){return new t(e,r).trimTop()},t.trimBottom=function(e,r){return new t(e,r).trimBottom()},t.trimLeft=function(e,r){return new t(e,r).trimLeft()},t.trimRight=function(e,r){return new t(e,r).trimRight()},t.prototype.trim=function(){return this.image=i.getImage(this._trim(i.getImageData(this.image))),this},t.prototype.trimTop=function(){return this.image=i.getImage(this._trimTop(i.getImageData(this.image))),this},t.prototype.trimBottom=function(){return this.image=i.getImage(this._trimBottom(i.getImageData(this.image))),this},t.prototype.trimLeft=function(){return this.image=i.getImage(this._trimLeft(i.getImageData(this.image))),this},t.prototype.trimRight=function(){return this.image=i.getImage(this._trimRight(i.getImageData(this.image))),this},t.prototype._trim=function(t){i.validate(t);var e=this._trimTop(t);return e=this._trimBottom(e),e=this._trimLeft(e),e=this._trimRight(e)},t.prototype._trimTop=function(t){var e=0,r=4*t.width,a=t.height;return this.readImageData(n.TOP,t,function(t,r,n){if(0!=n.alpha())return e=t,"break"}),this.cutImageData(t,e,0,a,r)},t.prototype._trimBottom=function(t){var e=t.height,r=4*t.width;return this.readImageData(n.BOTTOM,t,function(t,r,n){if(0!=n.alpha())return e=t,"break"}),this.cutImageData(t,0,0,e,r)},t.prototype._trimLeft=function(t){var e=0,r=4*t.width,a=t.height;return this.readImageData(n.LEFT,t,function(t,r,n){if(0!=n.alpha())return e=r,"break"}),this.cutImageData(t,0,e,a,r)},t.prototype._trimRight=function(t){var e=4*t.width,r=t.height;return this.readImageData(n.RIGHT,t,function(t,r,n){if(0!=n.alpha())return e=r,"break"}),this.cutImageData(t,0,0,r,e)},t.prototype.cutImageData=function(t,e,r,n,a){i.validate(t);var o=t.data,u=4*t.width;n=0==n?1:n,a=0==a?1:a;for(var c=n==e?1:n-e,f=a/4-r/4,h=i.create(f,c),m=u-a,s=0,g=e;g<n;g++)for(var p=g*a+g*m,l=r;l<a;l+=4,s+=4)h.data[s]=o[p+l],h.data[s+1]=o[p+l+1],h.data[s+2]=o[p+l+2],h.data[s+3]=o[p+l+3];return h},t.prototype.readImageData=function(t,e,r){i.validate(e);var a,o,u=e.data,c=-1,f=4*e.width,h=e.height,m=!1;if(t===n.TOP){var s=h,g=0,p=f,l={row:1,col:4};for(a=d=0;a<s;a+=l.row){for(c=a*f,o=g;o<p&&"break"!=(m=r.apply(this,[a,o,{red:b(c+o),green:b(c+o+1),blue:b(c+o+2),alpha:b(c+o+3)}]));o+=l.col);if("break"==m)break}}else if(t===n.BOTTOM){s=0,g=f,p=0;for(a=d=h;a>=s;a--){for(c=a*g,o=g;o>p&&"break"!=(m=r.apply(this,[a,o,{red:b(c-o),green:b(c-o-3),blue:b(c-o-2),alpha:b(c-o-1)}]));o-=4);if("break"==m)break}}else if(t===n.LEFT){var d=0;s=h,p=f;for(o=g=0;o<p;o+=4){for(a=d;a<s&&(c=a*p,"break"!=(m=r.apply(this,[a,o,{red:b(c+o),green:b(c+o+1),blue:b(c+o+2),alpha:b(c+o+3)}])));a++);if("break"==m)break}}else if(t===n.RIGHT){d=h-1,s=1,p=0;for(o=g=f;o>p;o-=4){for(a=d;a>s&&(c=a*g-4+o,"break"!=(m=r.apply(this,[a,o,{red:b(c-3),green:b(c-2),blue:b(c-1),alpha:b(c)}])));a--);if("break"==m)break}}function b(t){return function(e){if(!e)return u[t];u[t]=e}}return e},t}();r.d(e,"TrimImage",function(){return f})}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,